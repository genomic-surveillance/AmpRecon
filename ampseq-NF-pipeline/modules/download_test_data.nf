#!/usr/bin/env nextflow

nextflow.enable.dsl = 2


process download_bcl_from_s3 {
	//download and unzip bcl related files for testing purposes

	input:
	val(bcl_id)

	output:
	path("${bcl_id}")

	script:
	"""
	s3cmd get s3://amplicon-test-data/${bcl_id}.tar.gz
	tar -xvzf ${bcl_id}.tar.gz
	"""
}


process download_i2b_output_from_s3 {

	//download reference .bam generated by bambi i2b

	input:
	val(bcl_id)

	output:
	path("*.bam")
	
	script:
	"""
	curl https://amplicon-test-data.cog.sanger.ac.uk/${bcl_id}.test_i2b.subset.bam > ${bcl_id}.test.bam
	"""
}


process download_bambi_decode_output_from_s3 {
	
	//download bambi decode test data from s3 

	input:
	val(bcl_id) 

	output:
	tuple path("*.bam"), path("*.metrics")

	script:
	"""
	curl https://amplicon-test-data.cog.sanger.ac.uk/${bcl_id}_bambi_decode.subset.bam > test.decode.bam
	curl https://amplicon-test-data.cog.sanger.ac.uk/${bcl_id}.subset.metrics > test.decode.metrics
	"""

}


process download_bamadapterfind_output_from_s3 {


	input:
	val(bcl_id)

	output:
	path("*.bam")

	script:
	"""
	curl https://amplicon-test-data.cog.sanger.ac.uk/${bcl_id}.adapters.bam
	"""

}


process download_test_cram_from_s3 {


	input:
	val(file_id)

	output:
	path("*.cram")

	script:
	"""
	s3cmd get s3://amplicon-test-data/${file_id}.cram
	"""


}

#!/usr/bin/env python

import unittest
import os
import pandas as pd
import json
from collections import defaultdict
from importlib.machinery import SourceFileLoader
test_dir = os.path.dirname(os.path.realpath(__file__))
test_files_dir = os.path.join(test_dir, "test_files")
#load in barcoding as module (requires more complicated import)
#because file does not have a .py suffix
loader = SourceFileLoader('barcoding', os.path.join(
        test_dir,
        "barcoding"
        ))
barcoding = loader.load_module()
Barcode = barcoding.Barcode

#get barcode ref from config file
barcode_ref = json.load(open(os.path.join(test_dir,"config.json")))["barcoding"]["barcode_ref"]
deconstruct_barcode_ref = defaultdict(list)
for d in barcode_ref.values():
    deconstruct_barcode_ref[str(d["Locus"])].append(d["Chromosome"])

#read in all files in test_files directory as dataframe
d_dfs = {f.split("_")[-1].strip(".txt"):barcoding.read_genotype_file(
    os.path.join(test_files_dir,f),
    barcode_ref,
    deconstruct_barcode_ref,
    "SampleID"
) for f in os.listdir(test_files_dir)}

class TestBarcode(unittest.TestCase):
    def setUp(self):
        """
        Set up 3 objects for testing using the 3 input files in "test_files"

        Use keep_chroms_1 for obj 1 and regress, 2 for obj 2
        """
        self.barcode_obj_1 = Barcode(d_dfs["1"].get("Sample1",{}), barcode_ref)
        self.barcode_obj_2 = Barcode(d_dfs["2"].get("Sample1",{}), barcode_ref)
        self.barcode_obj_regress = Barcode(d_dfs["regress"].get("Sample1",{}), barcode_ref)

        self.d_objects = {
            "1":self.barcode_obj_1,
            "2":self.barcode_obj_2,
            "regress":self.barcode_obj_regress
        }

    def test_build_barcode(self):
        """
        Iterate through all 3 objects and check that output barcode is correct
        """
        d_barcodes = {
            "1":"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
            "2":"AGTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
            "regress":"AGTCAGTGCAAACGTCTAAANGTGACGGCTTATCATATTXATCTCAAGAAAAGATAXAGACTAACGCCGTCCGXAGGGTCATAGATXACCCCACTACAGGC"
        }
        
        for k, truth_barcode in d_barcodes.items():
            self.assertEqual(truth_barcode, self.d_objects[k].barcode)

if __name__=="__main__":
    unittest.main()
        
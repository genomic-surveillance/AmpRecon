#!/usr/bin/env python

from speciation.speciation import Speciate
import os
import json
import pandas as pd
import argparse
from glob import glob
from pathlib import Path
from tqdm import tqdm
from multiprocessing import Pool

class NoConfigError(Exception):
    def __init__(self, message="""
        You must specify a path to a valid config file.
    """):
        self.message = message
        super().__init__(self.message)

class NoGenotypeFilesError(Exception):
    def __init__(self, message="""
        You must specify input genotype files.
    """):
        self.message = message
        super().__init__(self.message)

class NoBarcodesError(Exception):
    def __init__(self, message="""
        You must specify a path to a valid barcodes file.
    """):
        self.message = message
        super().__init__(self.message)

def output_df(
    records, 
    outfile:str,
    sep="\t"
    ) -> None:
    """
    Create dataframe from a list of records.
    Output dataframe as TSV to outfile.
    """
    outdir = os.path.dirname(outfile)
    Path(outdir).mkdir(parents=True, exist_ok=True)
    df = pd.DataFrame.from_records(records)
    df.to_csv(outfile, sep=sep, index=False)

def main(
    genotype_file_path:str,
    d_barcode:str,
    maf_out:str,
    sample_col:str
    ) -> dict:
    """
    1) Load genotype file from path into pandas dataframe
    2) Create Speciate object with genotype file, barcode and config
    3) Output tsv for MAF/Depth counts
    4) dictionary with rows for species call and atched loci outputs
    """
    df_genotype_file = pd.read_csv(genotype_file_path, sep="\t")

    out_species_labels = []
    out_matched_loci = []

    for sample, df_sample_genotype in df_genotype_file.groupby(sample_col):
        speciate = Speciate(
                df_sample_genotype,
                barcode,
                **config
            )

        out_species_label.append({"Sample": sample, "Species":speciate.species_label}
)
        speciate.matched_loci["Sample"] = sample
        out_matched_loci.append(speciate.matched_loci)
    
        df_maf = pd.DataFrame(speciate.write_out).T
        df_maf = df_maf.reset_index().rename({"index":"Position"}, axis=1)

        if maf_out:
            output_df(df_maf, maf_out,f"{base}_maf.tsv")

    return {
        "species_out":out_species_label,
        "matched_loci": out_matched_loci
    }

def map_main(args):
    """
    Return run of the main function with arguments
    (Implementation of multiprocessing starmap)
    """
    return main(*args)

if __name__=="__main__":
    parser = argparse.ArgumentParser(
        prog = "Amplicon Pipeline Speciation",
        description = "A package to perform speciation based on the production amplicon pipeline"
    )

    parser.add_argument("input_genotype_files", help="""
        Input list of all genotype files (TSV format) to be run through the speciation program
        """)
    parser.add_argument("barcodes", help="""
        Path to barcodes output file for querying
    """)
    parser.add_argument("config", help="""
        Path to config json (default: config.json)
    """)
    parser.add_argument("--outfile", help="""
        Path to output file (default: ./barcodes.tsv)
    """)
    parser.add_argument("--pbar", action="store_true", help="""
        Show a progress bar while running 
    """)
    parser.add_argument("--ncpus", type=int, help="""
        No. cpus to use in processing
    """)
    parser.add_argument("--output_debug_path", help="""
        Ouput directory to save debug files. If not provided files will not be output.
    """)
    parser.add_argument("--sample_col", help="""
        Column to access for sample ID information in genotype file (default: SampleID)
    """)

    args = {k:v for k,v in vars(parser.parse_args()).items() if v}

    if args["input_genotype_files"]:
        genotype_files = glob(args["input_genotype_files"])
    else:
        raise NoGenotypeFilesError

    if args["barcodes"]:
        df_barcode = pd.read_csv(args["barcodes"], sep="\t")
        d_barcode = dict(zip(df_barcode.Sample, df_barcode.Barcode))
    else:
        raise NoBarcodesError

    if args["config"]:
        config = json.load(open(args["config"]))["speciation"]
    else:
        raise NoConfigError

    outfile = args.get("outfile","./species.tsv")
    debug_outdir = args.get("output_debug_path","")
    sample_col = args.get("sample_col", "SampleID")

    species_out_records = []
    sample_stats_records = []

    if args.get("ncpus",1) == 1:
        if args["pbar"]:
            iterator = tqdm(genotype_files)
        else:
            iterator = genotype_files

        all_samples_out = []
        for genotype_file in iterator:
            out = main(genotype_file, d_barcode, debug_outdir, sample_col)

            all_samples_out.append(out)
    else:
        all_args = [(
            genotype_file,
            os.path.basename(genotype_file.split(".")[0]),
            d_barcode[os.path.basename(genotype_file.split(".")[0])],
            debug_outdir,
            sample_col
            ) for genotype_file in genotype_files]
            
        with Pool(args["ncpus"]) as p:
            if args["pbar"]:
                all_samples_out = list(tqdm(p.imap(map_main, all_args), total=len(genotype_files)))
            else:
                all_samples_out = list(p.imap(map_main, all_args))
    
    for record in all_samples_out:
        species_out_records.append([item for sublist in record["species_out"] for item in sublist])
        sample_stats_records.append([item for sublist in record["matched_loci"] for item in sublist])


    output_df(species_out_records, outfile)

    if debug_outdir:
        output_df(sample_stats_records, os.path.join(debug_outdir, "matched_loci.tsv"))
    
#!/usr/bin/env python

from speciation.speciation import Speciate
import os
import json
import pandas as pd
import argparse
from glob import glob
from pathlib import Path

def output_df(records, outdir, name, sep="\t"):
    Path(outdir).mkdir(parents=True, exist_ok=True)
    df = pd.DataFrame.from_records(records)
    outfile = os.path.join(outdir, name)
    df.to_csv(outfile, sep=sep, index=False)


if __name__=="__main__":
    parser = argparse.ArgumentParser(
        prog = "Amplicon Pipeline Speciation",
        description = "A package to perform speciation based on the production amplicon pipeline"
    )

    parser.add_argument("--input_vcfs", help="""
        Input list of all vcfs to be run through the speciation program (default: all files in current directory ending with .vcf.gz)
        """)
    parser.add_argument("--suffix", help="""
    Suffix for selecting all vcfs in current directory (default: vcf.gz)
    """)
    parser.add_argument("--barcodes", help="""
        Path to barcodes output file for querying (default: ./barcodes.tsv)
    """)
    parser.add_argument("--config", help="""
        Path to config json (default: config.json)
    """)
    parser.add_argument("--outdir", help="""
        Path to directory to output results (default: .)
    """)

    args = {k:v for k,v in vars(parser.parse_args()).items()}

    if not args["input_vcfs"]:
        args["input_vcfs"] = [i for i in os.listdir(".") if i.endswith(args.pop("suffix",".vcf.gz"))]
    else:
        args["input_vcfs"] = glob(args["input_vcfs"])

    if not args["barcodes"]:
        args["barcodes"] = "./barcodes.tsv"

    df_barcode = pd.read_csv(args["barcodes"], sep="\t")
    d_barcode = dict(zip(df_barcode.Sample, df_barcode.Barcode))

    if not args["config"]:
        args["config"] = "config.json"

    if not args["outdir"]:
        args["outdir"] = "."
    
    scriptdir = os.path.dirname(os.path.realpath(__file__))
    config_path = os.path.join(scriptdir, args["config"])

    config = json.load(open(config_path))

    species_out_records = []
    sample_stats_records = []

    for vcf in args["input_vcfs"]:
        base = os.path.basename(vcf.split(".")[0])
        barcode = d_barcode[base]

        speciate = Speciate(
            vcf,
            barcode,
            **config
        )
        
        species_out_row = {"Sample": base, "Species":speciate.species_label}
        species_out_records.append(species_out_row)

        speciate.matched_loci["Sample"] = base
        sample_stats_records.append(speciate.matched_loci)

        df_maf = pd.DataFrame(speciate.write_out).T
        df_maf = df_maf.reset_index().rename({"index":"Position"}, axis=1)
        output_df(df_maf, args["outdir"],f"{base}_maf.tsv")

    output_df(species_out_records, args["outdir"], "species_out.tsv")
    output_df(sample_stats_records, args["outdir"], "sample_stats.tsv")
    